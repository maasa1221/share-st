{"version":3,"sources":["components/logo.png","components/Header.js","components/List.js","screens/HomeScreen.js","screens/ListScreen.js","screens/CreateScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","bg","variant","Brand","href","src","logo","height","className","alt","Nav","Link","Form","inline","IconButton","color","aria-label","React","Component","tempAvatar","ProList","Probox","Proimg","Texttitle","Textname","styled","img","p","div","HomeScreen","state","List","ListScreen","CreateScreen","type","id","name","accept","placeholder","to","AppNavigator","history","createHistory","basename","process","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74ce9bd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7db85b19.png\";","import React from 'react';\nimport styled from 'styled-components';\nimport logo from './logo.png'\nimport {Link} from \"react-router-dom\"\nimport {Navbar,Form,Nav} from \"react-bootstrap\"\nimport AlarmIcon from '@material-ui/icons/Notifications';\nimport AccountIcon from '@material-ui/icons/AccountCircle';\nimport IconButton from '@material-ui/core/IconButton';\n\nclass Header extends React.Component {\n    render() {\n      return (\n        <div >\n          <Navbar bg=\"light\" variant=\"light\">\n            <Navbar.Brand href=\"#home\">\n              <img\n                src={logo}\n                height=\"30\"\n                className=\"d-inline-block align-top\"\n                alt=\"React Bootstrap logo\"\n              />\n            </Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/\">Home</Nav.Link>\n              <Nav.Link href=\"/create\">Create</Nav.Link>\n              <Nav.Link href=\"/list\">List</Nav.Link>\n              <Nav.Link href=\"/list\">Setting</Nav.Link>\n            </Nav>\n            <Form inline >\n              <Nav.Link href=\"/create\">Login</Nav.Link>\n              <Nav.Link href=\"/list\">SignUp</Nav.Link>\n              <IconButton color=\"black\" aria-label=\"add an alarm\">\n                <AlarmIcon />\n              </IconButton>\n              <IconButton color=\"black\" aria-label=\"add an alarm\">\n                <AccountIcon />\n              </IconButton>\n            </Form>\n          </Navbar>\n        </div>\n      );\n    }\n  }\n  \n  \n  export default Header;\n  ","import React from 'react';\nimport styled from 'styled-components';\nimport {Link} from \"react-router-dom\"\nconst tempAvatar = 'https://firebasestorage.googleapis.com/v0/b/novels-a5884.appspot.com/o/temp%2Ftemp.png?alt=media&token=a4d36af6-f5e8-49ad-b9c0-8b5d4d899c0d'\n\nclass ProList extends React.Component {\n  render() {\n    return (\n      <div >\n        <Probox>\n        <Proimg src={tempAvatar}/>  \n        <Texttitle>インドアセールスの設計の仕方</Texttitle>\n        <Textname>Gifts Japan</Textname>\n        </Probox>\n\n        <Probox>\n        <Proimg src={tempAvatar}/>  \n        <Texttitle>インドアセールスの設計の仕方</Texttitle>\n        <Textname>Gifts Japan</Textname>\n        </Probox>\n\n        <Probox>\n        <Proimg src={tempAvatar}/>  \n        <Texttitle>インドアセールスの設計の仕方</Texttitle>\n        <Textname>Gifts Japan</Textname>\n        </Probox>\n\n        \n      </div>\n    );\n  }\n}\n\nconst Proimg = styled.img`\n  border-radius: 50%; \n  width:  150px;       \n  height: 150px; \n  position: relative;\n`;\nconst Texttitle = styled.p`\n  font-size: 25px;\n  position: relative;\n`;\nconst Textname = styled.p`\n  font-size: 20px;\n  position: relative;\n`;\nconst Probox = styled.div`\n  margin: 10px;\n  padding: 5px;\n  border: solid #ddd;\n  width: 30%;\n  text-align:center;\n  display: inline-block;\n`;\n\n\nexport default ProList;\n","import React from 'react';\n//import styled from 'styled-components';\nimport Header from '../components/Header';\nimport List from '../components/List';\nclass HomeScreen extends React.Component {\n    state = {\n    }\n  \n    componentWillMount() {\n      \n    }\n  \n    render() {\n      return (\n        <div >\n          <Header />\n          <div>\n            <List />\n          </div>\n        </div>\n        \n      );\n    }\n  }\n  \n  \n  export default HomeScreen\n  ","import React from 'react';\n//import styled from 'styled-components';\nimport Header from '../components/Header';\nimport List from '../components/List';\nclass ListScreen extends React.Component {\n    state = {\n    }\n  \n    componentWillMount() {\n      \n    }\n  \n    render() {\n      return (\n        <div >\n          <Header />\n          <div>\n            <List />\n          </div>\n        </div>\n        \n      );\n    }\n  }\n  \n  \n  export default ListScreen\n  ","import React from 'react';\nimport {Link} from \"react-router-dom\"\nimport styled from 'styled-components';\nimport Header from '../components/Header';\nconst tempAvatar = 'https://firebasestorage.googleapis.com/v0/b/novels-a5884.appspot.com/o/temp%2Ftemp.png?alt=media&token=a4d36af6-f5e8-49ad-b9c0-8b5d4d899c0d'\n\nclass CreateScreen extends React.Component {\n  \n  render() {\n    return (\n      <div >\n        <Header />\n\n        <p >\n        提供方法\n        </p>\n        <Proimg src={tempAvatar}/>  \n        <input \n          type=\"file\"\n          id=\"avatar\" \n          name=\"avatar\"\n          accept=\"image/png, image/jpeg\"\n       />\n        <p >\n        プラン名\n        </p>\n        <input\n          placeholder=\"名前\"\n          />\n        <p >\n        会社名\n        </p>\n        <input\n          placeholder=\"例:170\"\n        />\n        <p >\n        価格\n        </p>\n        <input\n          placeholder=\"例:22\"\n        />\n        <p >\n        提供方法\n        </p>\n        <input\n          placeholder=\"例:22\"\n        />\n        <p >\n        詳細\n        </p>\n        <input\n          placeholder=\"例:22\"\n        />\n        \n       <button>\n        <Link to={`/home`}>作成</Link>\n       </button>\n      </div>\n    );\n  }\n}\n\nconst Proimg = styled.img`\nborder-radius: 50%; \nwidth:  150px;       \nheight: 150px; \n`;\n\n\nexport default CreateScreen\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport createHistory from \"history/createBrowserHistory\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport ListScreen from \"./screens/ListScreen\";\nimport CreateScreen from \"./screens/CreateScreen\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst AppNavigator = () => (\n  <Router history={createHistory({ basename: process.env.PUBLIC_URL })}>\n    <div>\n      <Route exact path=\"/\" component={HomeScreen} />\n      <Route path=\"/list\" component={ListScreen} />\n      <Route path=\"/create\" component={CreateScreen} />\n    </div>\n  </Router>\n);\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <AppNavigator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}